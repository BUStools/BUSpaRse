// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// fill_cell_gene
List fill_cell_gene(const char* fn, List genes, int est_ncells, int est_ngenes, std::vector<std::string> whitelist, bool display_progress, int progress_unit);
RcppExport SEXP _BUSpaRse_fill_cell_gene(SEXP fnSEXP, SEXP genesSEXP, SEXP est_ncellsSEXP, SEXP est_ngenesSEXP, SEXP whitelistSEXP, SEXP display_progressSEXP, SEXP progress_unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< List >::type genes(genesSEXP);
    Rcpp::traits::input_parameter< int >::type est_ncells(est_ncellsSEXP);
    Rcpp::traits::input_parameter< int >::type est_ngenes(est_ngenesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type whitelist(whitelistSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    Rcpp::traits::input_parameter< int >::type progress_unit(progress_unitSEXP);
    rcpp_result_gen = Rcpp::wrap(fill_cell_gene(fn, genes, est_ncells, est_ngenes, whitelist, display_progress, progress_unit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BUSpaRse_fill_cell_gene", (DL_FUNC) &_BUSpaRse_fill_cell_gene, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_BUSpaRse(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
